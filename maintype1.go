/*
Представьте что вы работаете в большой компании где используется модульная архитектура. Ваш коллега написал модуль с какой-то логикой (вы не знаете) и передает в вашу программу какие-то данные. Вы же пишете функцию которая считывает две переменных типа string ,  а возвращает число типа int64 которое нужно получить сложением этих строк.


Но не было бы так все просто, ведь ваш коллега не пишет на Go, и он зол из-за того, что гоферам платят больше. Поэтому он решил подшутить над вами и подсунул вам свинью. Он придумал вставлять мусор в строки перед тем как вызывать вашу функцию.


Поэтому предварительно вам нужно убрать из них мусор и конвертировать в числа. Под мусором имеются ввиду лишние символы и спец знаки. Разрешается использовать только определенные пакеты: fmt, strconv, unicode, strings,  bytes. Они уже импортированы, вам ничего импортировать не нужно!

Считывать и выводить ничего не нужно!

Ваша функция должна называться adding() !

Считайте что функция и пакет main уже объявлены!

Sample Input:
%^80 hhhhh20&&&&nd
Sample Output:
100
*/


package main

import (
	"fmt"
	"strconv"
	"unicode"
)

func main() {
	a := "%^80"
	b := "hhhhh20&&&&nd"

	fmt.Print(adding(a,b))
	//fmt.Print(strconv.ParseInt(a,10,0))
}

func adding(a,b string) int {
	var aRed, bRed string
	for _, aRes := range a {
		if unicode.IsDigit(aRes) {
			aRed += string(aRes)
		}
		
	}
	for _, bRes := range b {
		if unicode.IsDigit(bRes) {
			bRed += string(bRes)
		}
		
	}
    aInt, err1 := strconv.Atoi(aRed)
    bInt, err2 := strconv.Atoi(bRed)
	if err2 != nil && err1 != nil {
		panic(err1)
    } else {
		return aInt + bInt 
	}
}